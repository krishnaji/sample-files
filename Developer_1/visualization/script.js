// script.js (Modified for Side-by-Side Frame and Video)

d3.json("data.json").then(scenesData => {
    const scenesContainer = d3.select("#scenes-container");

    const scenes = scenesContainer.selectAll(".scene")
        .data(scenesData)
        .join("div")
        .classed("scene", true);

    scenes.each(function(sceneData) {
        const scene = d3.select(this);

        const sceneInfo = scene.append("div").classed("scene-info", true);
        sceneInfo.append("h2").text(`Scene: ${sceneData.scene.location}`);
        sceneInfo.append("p").text(`Description: ${sceneData.scene.description}`);

        sceneInfo.append("p").text(`Time of Day: ${sceneData.scene.time_of_day || 'N/A'}`);
        sceneInfo.append("p").text(`Lighting: ${sceneData.scene.lighting || 'N/A'}`);
        sceneInfo.append("p").text(`Camera Setup: ${sceneData.scene.camera_setup || 'N/A'}`);
        sceneInfo.append("p").text(`Mood: ${sceneData.scene.mood || 'N/A'}`);
        sceneInfo.append("p").text(`Setting Details: ${sceneData.scene.setting_details || 'N/A'}`);

        const characterList = scene.append("div").classed("character-list", true);
        const characters = characterList.selectAll(".character")
            .data(sceneData.characters)
            .join("div")
            .classed("character", true);

        characters.append("h3").text(d => d.name);
        characters.append("p").text(d => d.description);
        characters.append("p").text(d => `Personality: ${d.personality_traits.join(', ')}`);

        const timeline = scene.append("div").classed("timeline", true);
        const events = timeline.selectAll(".event")
            .data(sceneData.events)
            .join("div")
            .classed("event", true);

        const tooltip = d3.select("body").append("div")
            .classed("tooltip", true)
            .style("opacity", 0);

        events.each(function(d, i) {
            d3.select(this).append("h3").text(`Event ${i + 1}: ${d.description}`);

            // Display the image generated by Imagen (if it exists)
            if (d.image_path) {
                d3.select(this).append("img")
                    .attr("src","../"+  d.image_path)
                    .attr("alt", `Event ${i + 1} Image`)
                    .classed("event-image", true);
            }

            d3.select(this).append("p").text(`Camera Angle: ${d.camera_angle || 'N/A'}`);

            // --- Frame and Video Container ---
            if (d.selected_frame_path || (d.video_paths && d.video_paths.length > 0)) {
                const mediaContainer = d3.select(this).append("div")
                    .classed("media-container", true);  // Add a container

                // NEW: Display the Selected Frame (if it exists) *INSIDE* the container
                if (d.selected_frame_path) {
                    mediaContainer.append("img")
                        .attr("src", "../" + d.selected_frame_path)
                        .attr("alt", `Selected Frame from Previous Event`)
                        .classed("selected-frame-image", true); // Removed fixed width here
                }


              // --- Video Display --- *INSIDE* the container
              if (d.video_paths && d.video_paths.length > 0) {
                  const videoContainer = mediaContainer.append("div").classed("video-container", true); // Nested container for videos
                  d.video_paths.forEach(videoPath => {
                      videoContainer.append("video")
                          .attr("src", "../" + videoPath)
                          .attr("controls", true)
                          .classed("event-video", true);
                  });
              }
            }

        });

        events.on("mouseover", function(event, d) {
            tooltip.transition()
                .duration(200)
                .style("opacity", .9);
            tooltip.html(`Event ID: ${d.id}`)
                .style("left", (event.pageX + 10) + "px")
                .style("top", (event.pageY - 28) + "px");
        })
        .on("mouseout", function(d) {
            tooltip.transition()
                .duration(500)
                .style("opacity", 0);
        });

        const dialogues = events.selectAll(".dialogue")
            .data(d => d.dialogues)
            .join("div")
            .classed("dialogue", true);

        dialogues.append("p")
            .classed("dialogue-text", true)
            .text(d => `${d.speaker_name} (${d.emotion || 'Neutral'}): ${d.text}`)
            .on("click", function(event, d) {
                console.log(`Clicked dialogue by ${d.speaker_name}: ${d.text}`);
            });
    });

}).catch(error => {
    console.error("Error loading data:", error);
});